# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `standard` gem.
# Please instead update this file by running `bin/tapioca gem standard`.

module RuboCop; end
class RuboCop::ConfigNotFoundError < ::RuboCop::Error; end
module RuboCop::Cop; end

module RuboCop::Cop::ConfigurableNaming
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::ConfigurableFormatting
end

# source://rubocop/1.25.1/lib/rubocop/cop/mixin/configurable_naming.rb#10
RuboCop::Cop::ConfigurableNaming::FORMATS = T.let(T.unsafe(nil), Hash)

module RuboCop::Cop::ConfigurableNumbering
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::ConfigurableFormatting
end

# source://rubocop/1.25.1/lib/rubocop/cop/mixin/configurable_numbering.rb#11
RuboCop::Cop::ConfigurableNumbering::FORMATS = T.let(T.unsafe(nil), Hash)

module RuboCop::Cop::Lint; end

class RuboCop::Cop::Lint::AssignmentInCondition < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::SafeAssignment

  # source://standard//lib/standard/rubocop/ext.rb#4
  def message(_); end

  # source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#49
  def on_if(node); end

  # source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#49
  def on_until(node); end

  # source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#49
  def on_while(node); end

  private

  # source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#72
  def allowed_construct?(asgn_node); end

  # source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#76
  def conditional_assignment?(asgn_node); end

  # source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#80
  def skip_children?(asgn_node); end

  # source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#86
  def traverse_node(node, &block); end
end

# source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#47
RuboCop::Cop::Lint::AssignmentInCondition::ASGN_TYPES = T.let(T.unsafe(nil), Array)

# source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#44
RuboCop::Cop::Lint::AssignmentInCondition::MSG_WITHOUT_SAFE_ASSIGNMENT_ALLOWED = T.let(T.unsafe(nil), String)

# source://rubocop/1.25.1/lib/rubocop/cop/lint/assignment_in_condition.rb#40
RuboCop::Cop::Lint::AssignmentInCondition::MSG_WITH_SAFE_ASSIGNMENT_ALLOWED = T.let(T.unsafe(nil), String)

module RuboCop::Cop::Standard; end

# Check for uses of braces around single line blocks, but allows either
# braces or do/end for multi-line blocks.
#
# @example
#   # bad - single line block
#   items.each do |item| item / 5 end
#
#   # good - single line block
#   items.each { |item| item / 5 }
class RuboCop::Cop::Standard::BlockSingleLineBraces < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://standard//lib/standard/cop/block_single_line_braces.rb#31
  def on_block(node); end

  # source://standard//lib/standard/cop/block_single_line_braces.rb#16
  def on_send(node); end

  private

  # source://standard//lib/standard/cop/block_single_line_braces.rb#69
  def autocorrect(corrector, node); end

  # @return [Boolean]
  #
  # source://standard//lib/standard/cop/block_single_line_braces.rb#75
  def correction_would_break_code?(node); end

  # source://standard//lib/standard/cop/block_single_line_braces.rb#43
  def get_blocks(node, &block); end

  # source://standard//lib/standard/cop/block_single_line_braces.rb#65
  def message(node); end

  # @return [Boolean]
  #
  # source://standard//lib/standard/cop/block_single_line_braces.rb#61
  def proper_block_style?(node); end

  # source://standard//lib/standard/cop/block_single_line_braces.rb#81
  def replace_do_end_with_braces(corrector, loc); end

  # @return [Boolean]
  #
  # source://standard//lib/standard/cop/block_single_line_braces.rb#91
  def whitespace_after?(range, length = T.unsafe(nil)); end
end

# source://standard//lib/standard/rubocop/ext.rb#11
RuboCop::DirectiveComment::DIRECTIVE_COMMENT_REGEXP = T.let(T.unsafe(nil), Regexp)

class RuboCop::Error < ::StandardError; end
class RuboCop::IncorrectCopNameError < ::StandardError; end

# source://rubocop/1.25.1/lib/rubocop/ast_aliases.rb#5
RuboCop::NodePattern = RuboCop::AST::NodePattern

class RuboCop::OptionArgumentError < ::StandardError; end
module RuboCop::OptionsHelp; end

# source://rubocop/1.25.1/lib/rubocop/options.rb#416
RuboCop::OptionsHelp::FORMATTER_OPTION_LIST = T.let(T.unsafe(nil), Array)

# source://rubocop/1.25.1/lib/rubocop/options.rb#415
RuboCop::OptionsHelp::MAX_EXCL = T.let(T.unsafe(nil), String)

# source://rubocop/1.25.1/lib/rubocop/options.rb#418
RuboCop::OptionsHelp::TEXT = T.let(T.unsafe(nil), Hash)

# source://rubocop/1.25.1/lib/rubocop/ast_aliases.rb#6
RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

# source://rubocop/1.25.1/lib/rubocop/ast_aliases.rb#7
RuboCop::Token = RuboCop::AST::Token

class RuboCop::ValidationError < ::RuboCop::Error; end
class RuboCop::Warning < ::StandardError; end
module Standard; end

class Standard::BuildsConfig
  # @return [BuildsConfig] a new instance of BuildsConfig
  #
  # source://standard//lib/standard/builds_config.rb#9
  def initialize; end

  # source://standard//lib/standard/builds_config.rb#16
  def call(argv, search_path = T.unsafe(nil)); end

  private

  # source://standard//lib/standard/builds_config.rb#32
  def determine_yaml_file(argv, search_path, option_name, default_file); end
end

class Standard::Cli
  # @return [Cli] a new instance of Cli
  #
  # source://standard//lib/standard/cli.rb#6
  def initialize(argv); end

  # source://standard//lib/standard/cli.rb#12
  def run; end
end

class Standard::Config < ::Struct
  # Returns the value of attribute paths
  #
  # @return [Object] the current value of paths
  def paths; end

  # Sets the attribute paths
  #
  # @param value [Object] the value to set the attribute paths to.
  # @return [Object] the newly set value
  def paths=(_); end

  # Returns the value of attribute rubocop_config_store
  #
  # @return [Object] the current value of rubocop_config_store
  def rubocop_config_store; end

  # Sets the attribute rubocop_config_store
  #
  # @param value [Object] the value to set the attribute rubocop_config_store to.
  # @return [Object] the newly set value
  def rubocop_config_store=(_); end

  # Returns the value of attribute rubocop_options
  #
  # @return [Object] the current value of rubocop_options
  def rubocop_options; end

  # Sets the attribute rubocop_options
  #
  # @param value [Object] the value to set the attribute rubocop_options to.
  # @return [Object] the newly set value
  def rubocop_options=(_); end

  # Returns the value of attribute runner
  #
  # @return [Object] the current value of runner
  def runner; end

  # Sets the attribute runner
  #
  # @param value [Object] the value to set the attribute runner to.
  # @return [Object] the newly set value
  def runner=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Standard::CreatesConfigStore
  # @return [CreatesConfigStore] a new instance of CreatesConfigStore
  #
  # source://standard//lib/standard/creates_config_store.rb#9
  def initialize; end

  # source://standard//lib/standard/creates_config_store.rb#15
  def call(standard_config); end
end

class Standard::CreatesConfigStore::AssignsRubocopYaml
  # source://standard//lib/standard/creates_config_store/assigns_rubocop_yaml.rb#5
  def call(config_store, standard_config); end

  private

  # source://standard//lib/standard/creates_config_store/assigns_rubocop_yaml.rb#12
  def rubocop_yaml_path(desired_version); end
end

class Standard::CreatesConfigStore::ConfiguresIgnoredPaths
  # source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#14
  def call(options_config, standard_config); end

  private

  # @return [Boolean]
  #
  # source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#41
  def absolute?(path); end

  # source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#33
  def absolutify(config_root, path); end

  # source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#28
  def ignored_patterns(standard_config); end
end

# source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#3
Standard::CreatesConfigStore::ConfiguresIgnoredPaths::DEFAULT_IGNORES = T.let(T.unsafe(nil), Array)

class Standard::CreatesConfigStore::SetsTargetRubyVersion
  # source://standard//lib/standard/creates_config_store/sets_target_ruby_version.rb#3
  def call(options_config, standard_config); end

  private

  # source://standard//lib/standard/creates_config_store/sets_target_ruby_version.rb#11
  def max_rubocop_supported_version(desired_version); end

  # source://standard//lib/standard/creates_config_store/sets_target_ruby_version.rb#22
  def normalize_version(version); end
end

class Standard::DetectsFixability
  # source://standard//lib/standard/detects_fixability.rb#3
  def call(offenses); end

  private

  # source://standard//lib/standard/detects_fixability.rb#12
  def cop_instance(cop_name); end
end

class Standard::FileFinder
  # source://standard//lib/standard/file_finder.rb#5
  def call(name, search_path); end
end

class Standard::Formatter < ::RuboCop::Formatter::BaseFormatter
  # @return [Formatter] a new instance of Formatter
  #
  # source://standard//lib/standard/formatter.rb#17
  def initialize(*args); end

  # source://standard//lib/standard/formatter.rb#29
  def file_finished(file, offenses); end

  # source://standard//lib/standard/formatter.rb#44
  def finished(inspected_files); end

  # source://standard//lib/standard/formatter.rb#25
  def started(_target_files); end

  private

  # @return [Boolean]
  #
  # source://standard//lib/standard/formatter.rb#105
  def auto_correct_option_provided?; end

  # source://standard//lib/standard/formatter.rb#101
  def path_to(file); end

  # source://standard//lib/standard/formatter.rb#58
  def print_fix_suggestion_once(offenses); end

  # source://standard//lib/standard/formatter.rb#50
  def print_header_once; end

  # source://standard//lib/standard/formatter.rb#87
  def print_todo_congratulations; end

  # source://standard//lib/standard/formatter.rb#71
  def print_todo_warning; end

  # @return [Boolean]
  #
  # source://standard//lib/standard/formatter.rb#109
  def should_suggest_fix?(offenses); end

  class << self
    # source://standard//lib/standard/formatter.rb#11
    def fixable_error_message(command); end
  end
end

# source://standard//lib/standard/formatter.rb#7
Standard::Formatter::STANDARD_GREETING = T.let(T.unsafe(nil), String)

class Standard::LoadsRunner
  # Warning: clever metaprogramming. 99% of the time this is Runners::Rubocop
  #
  # source://standard//lib/standard/loads_runner.rb#4
  def call(command); end
end

class Standard::LoadsYamlConfig
  # source://standard//lib/standard/loads_yaml_config.rb#8
  def call(standard_yaml_path, todo_yaml_path); end

  private

  # source://standard//lib/standard/loads_yaml_config.rb#55
  def arrayify(object); end

  # source://standard//lib/standard/loads_yaml_config.rb#25
  def construct_config(yaml_path, standard_yaml, todo_path, todo_yaml); end

  # source://standard//lib/standard/loads_yaml_config.rb#45
  def expand_ignore_config(ignore_config); end

  # source://standard//lib/standard/loads_yaml_config.rb#17
  def load_standard_yaml(yaml_path); end

  # source://standard//lib/standard/loads_yaml_config.rb#39
  def normalized_ruby_version(version); end
end

class Standard::MergesSettings
  # source://standard//lib/standard/merges_settings.rb#7
  def call(argv, standard_yaml); end

  private

  # source://standard//lib/standard/merges_settings.rb#39
  def determine_command(argv); end

  # source://standard//lib/standard/merges_settings.rb#51
  def merge(standard_yaml, standard_cli_flags, rubocop_cli_flags); end

  # source://standard//lib/standard/merges_settings.rb#27
  def parse_standard_argv(argv); end

  # source://standard//lib/standard/merges_settings.rb#21
  def separate_argv(argv); end

  # source://standard//lib/standard/merges_settings.rb#62
  def without_banned(rubocop_cli_flags); end
end

class Standard::MergesSettings::Settings < ::Struct
  # Returns the value of attribute options
  #
  # @return [Object] the current value of options
  def options; end

  # Sets the attribute options
  #
  # @param value [Object] the value to set the attribute options to.
  # @return [Object] the newly set value
  def options=(_); end

  # Returns the value of attribute paths
  #
  # @return [Object] the current value of paths
  def paths; end

  # Sets the attribute paths
  #
  # @param value [Object] the value to set the attribute paths to.
  # @return [Object] the newly set value
  def paths=(_); end

  # Returns the value of attribute runner
  #
  # @return [Object] the current value of runner
  def runner; end

  # Sets the attribute runner
  #
  # @param value [Object] the value to set the attribute runner to.
  # @return [Object] the newly set value
  def runner=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Standard::ParsesCliOption
  # source://standard//lib/standard/parses_cli_option.rb#16
  def argv_value_for(argv, option_name); end

  # source://standard//lib/standard/parses_cli_option.rb#5
  def call(argv, option_name); end
end

# source://standard//lib/standard/version.rb#2
Standard::VERSION = T.let(T.unsafe(nil), Gem::Version)
